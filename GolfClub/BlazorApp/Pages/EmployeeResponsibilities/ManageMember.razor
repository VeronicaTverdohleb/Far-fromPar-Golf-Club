@page "/ManageMember"
@using HttpClients.ClientInterfaces
@using global::Shared.Model
@using global::Shared.Dtos
@inject IUserService UserService;
@inject IJSRuntime jsRuntime;

<div class="head">
    <h3>Members</h3>
</div>

@if (users == null)
{
    <p></p>
}
else if (!users.Any())
{
    <p>No Members to display</p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Name</th>
            <th>Username</th>
        </tr>
        </thead>
        @foreach (var user in users)
        {
            <tr>
                <td>@user.Name</td>
                <td>@user.UserName</td>
            </tr>
        }
    </table>
}

@code {
    private IEnumerable<User>? users;

    private string name;
    private string username;
    private string password;
    private string msg = "";
    
    protected override async Task OnInitializedAsync()
    {
        try
        {
            users = await UserService.getAllUsersAsync();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }
    
    private async Task CreateMember()
    {
        msg = "";
        try
        {
            UserCreationDto creationDto = new(name, username, password);
            await UserService.CreateAsync(creationDto);
            users = await UserService.getAllUsersAsync();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = "Error Creating Member";
        }
    }
    
    private async Task DeleteMember(string Username)
    {
        msg = "";
        try
        {
            await UserService.DeleteAsync(Username);
        
            var list = new List<User>(users!);
            list.RemoveAll(i => i.UserName == Username);
            users = list.AsEnumerable();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }
    
    private async Task ConfirmAction(string UserName)
    {
        bool confirmed = await jsRuntime.InvokeAsync<bool>("confirmAction", "Are you sure you want to proceed?");
        
        if (confirmed)
        {
            try
            {
                await DeleteMember(UserName);
                await OnInitializedAsync();
            }
            catch (Exception e)
            {
                Console.WriteLine(e);
                msg = e.Message;
            }
        }
        else
        {
            await OnInitializedAsync();
        }
    }
}