@page "/ManageTournament/{tournamentName}"
@using global::Shared.Model
@using HttpClients.ClientInterfaces
@using global::Shared.Dtos.TournamentDto
@inject ITournamentService TournamentService
@inject IUserService UserService
@inject NavigationManager navMgr
<h3>@tournamentName</h3>

@if (tournament == null)
    {
        <h3>Loading</h3>
        <br/>
        <span>fetching data...</span>
    }
else
{
    <p>@tournament.Name</p>
    <p>@tournament.StartDate - @tournament.EndDate</p>
    <p></p>
    <h3>players:</h3>
    foreach (var player in players)
    {
        <p>@player.Name</p>
    }
    
    <select name="choosePlayer" id="choosePlayer" @onchange="SetSelectedPlayer">
        <option selected="selected">choose:</option>
        @foreach (var player in allPlayers)
        {
            <option value="@player.Name">@player.Name</option>
        }
    </select>
    <button @onclick="AddPlayer">register player</button>
    
    <button @onclick="SwitchDeleteBool">Delete Tournament</button>
    @if (delete)
    {
        <p>Are you sure? this will delete the tournament</p>
        <button @onclick="DeleteTournament">Yes</button>
        <button @onclick="SwitchDeleteBool">No</button>
    }
}


<label>@msg</label>

@code {
    [Parameter] 
    public string tournamentName { get; set; }

    private bool delete = false;
    private string chosenPlayerName ="";
    private Tournament tournament;
    private ICollection<User> players = new List<User>();
    private ICollection<User> allPlayers = new List<User>();
    private string msg;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            tournament = await TournamentService.GetTournamentByNameAsync(tournamentName);
            var playersInTournament = await TournamentService.GetAllTournamentPlayersAsync(tournamentName);
            players = playersInTournament.OrderBy(p => p.UserName).ToList();
            var allMembers = await UserService.GetAllUsersAsync();//propose changing to a method that only gets members
            allPlayers = allMembers.OrderBy(p => p.Name).ToList();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }

    private void SwitchDeleteBool()
    {
        delete = !delete;
    }

    private async void DeleteTournament()
    {
       await TournamentService.DeleteTournamentAsync(tournamentName);
        navMgr.NavigateTo($"/ManageTournament");
    }

    private async void AddPlayer()
    {
        RegisterPlayerDto update = new RegisterPlayerDto(chosenPlayerName, tournamentName);
        await TournamentService.AddPlayerAsync(update);
    }

    private void SetSelectedPlayer(ChangeEventArgs e)
    {
        if (!string.IsNullOrEmpty(e.Value.ToString()))
        {
            string selectedPlayerName = e.Value.ToString();
            chosenPlayerName = selectedPlayerName;
        }
    }
}