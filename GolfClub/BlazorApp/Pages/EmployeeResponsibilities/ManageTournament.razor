@page "/ManageTournament"
@using HttpClients.ClientInterfaces
@using global::Shared.Dtos.TournamentDto
@using global::Shared.Model
@inject ITournamentService TournamentService;
@inject NavigationManager navMgr;
<div class="headline_box">
    <img src="img/golfball.png" class="golfball" alt="Golf Ball"/>
    <h3 class="headline"> Manage Tournament </h3>
    <img src="img/golfball.png" class="golfball" alt="Golf Ball"/>
</div>
<h4>Create new tournament</h4>
<label>tournament name:</label>
<input type="text" @bind="tournamentName"/><br/><br/>
<label>start date:</label>
<input type="date" @bind="startDate"/><br/><br/>
<label>end date:</label>
<input type="date" @bind="endDate"/><br/><br/>
<button @onclick="CreateTournament" class="greenButton">Create Tournament</button><br/><br/>
<p style="color: red;">@msg</p><br/><br/><br/>
<h4>Manage existing tournament</h4>
<label>Select tournament:</label>
<select name="chooseTournament" id="chooseTournament" @onchange="SetSelectedTournament">
    <option selected="selected">choose:</option>
    @foreach (var tournament in tournaments)
    {
        <option value="@tournament.Name">@tournament.Name</option>
    }
</select>
<button @onclick="NavigateToTournament" class="greenButton">Select Tournament</button>





@code {
    private string tournamentName="";
    private string chosenTournamentName="";
    private DateOnly startDate = DateOnly.FromDateTime(DateTime.Today);
    private DateOnly endDate = DateOnly.FromDateTime(DateTime.Today);
    private ICollection<Tournament> tournaments = new List<Tournament>();
    private string msg = "";

    //Method that is ran upon loading the page
    protected override async Task OnInitializedAsync()
    {
        var tournamentCollection = await TournamentService.GetAllTournamentsAsync();
        tournaments = tournamentCollection.OrderBy(t => t.Name).ToList();
    }

    //creates a tournament with the given information
    private async Task CreateTournament()
    {
        CreateTournamentDto dto = new CreateTournamentDto(tournamentName, startDate, endDate);
        if (tournaments.Any(t => t.Name.ToLower().Equals(dto.Name.ToLower())))
        {
            msg = "This tournament already exists!";
        }
        else
        {
            try
            {
                await TournamentService.CreateTournamentAsync(dto);
                msg = "tournament created";
                navMgr.NavigateTo($"ManageTournament/{tournamentName}");
            }
            catch (Exception e)
            {
                msg = e.Message;
            }
            
        }
        
    }

    //Sets the variable that keeps track of the currently selected tournament.
    private void SetSelectedTournament(ChangeEventArgs e)
    {
        if (!string.IsNullOrEmpty(e.Value.ToString()))
        {
            string selectedTournamentName = e.Value.ToString();
            chosenTournamentName = selectedTournamentName;
        }
    }

    //Method that is called upon creation of a tournament. it loads the webpage holding the information of the tournament
    private void NavigateToTournament()
    {
        if (!string.IsNullOrEmpty(chosenTournamentName))
        {
            navMgr.NavigateTo($"ManageTournament/{chosenTournamentName}");
        }
    }
}