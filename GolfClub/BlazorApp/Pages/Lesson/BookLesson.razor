@page "/BookLesson"
@using BlazorApp.Services
@using global::Shared.Model
@using Microsoft.VisualBasic
@using System.Text.Json
@using global::Shared.Dtos.LessonDto
@using HttpClients.ClientInterfaces
@using System.Security.Claims
@inject IJavaSocketConnection socketService
@inject ILessonService lessonService;
@inject IUserService userService;

<h3>Book Lesson</h3>

<div>
    <label>Select a Date</label>
    <input type="date" @onchange="SetDateTime"/><br/><br/>
</div>
<div>
    <button @onclick="SendMessage">See Instructors</button>
</div>

@if (Instructors == null)
{
    <p style="color: red">@msg</p>
}else if (!Instructors.Any())
{
    <p style="color: red">No instructors are available on @chosenDate</p>
}
else
{
    <h2>Available Instructors on: @chosenDate</h2>
    @foreach (var instructor in Instructors)
    {
        <div class="instructor">
            <p>Name: @instructor.InstructorName</p>
            <p>Date & Time: @instructor.DateTime</p>
            <button onclick=@(() => BookALesson(instructor))>Book Lesson</button>
        </div>
    }
    <p style="color: red">@msg</p>
}

@code {
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = null!;
    private IEnumerable<Claim>? userClaims;
    
    private DateAndTime dateTime;
    private ICollection<InstructorLesson> Instructors;
    private string msg = "";
    private string selectedDate;
    private string chosenDate;
    private string username;
    
    protected override async Task OnInitializedAsync()
    {
        socketService.Connect();
    }

    private void SetDateTime(ChangeEventArgs e)
    {
        string selectedValue = e.Value.ToString();
        selectedDate = selectedValue;
        StateHasChanged();
    }
    
    private async Task SendMessage()
    {
        
        if (string.IsNullOrWhiteSpace(chosenDate))
        {
            chosenDate = "";
        }
        chosenDate = selectedDate;
        try
        {
            string returnMessage = await socketService.SendMessage(chosenDate);
            ConvertJson(returnMessage);
        }
        catch (Exception e)
        {
            if (e.Message.Equals("Object reference not set to an instance of an object."))
            {
                msg = "";
            }
            else
            {
                msg = e.Message;
            }
        }
    }
    
    private void ConvertJson(string jsonMsg)
    {

        var options = new JsonSerializerOptions
        {
            PropertyNameCaseInsensitive = true
        };

        var result = JsonSerializer.Deserialize<Dictionary<string, List<InstructorLesson>>>(jsonMsg, options);
        if (result.TryGetValue("instructor", out var instructorList))
        {
            Instructors = instructorList;
        }
        else
        {
            Instructors.Clear();
        }

    }
    
    private async void BookALesson(InstructorLesson instructorLesson)
    {
        if (instructorLesson == null)
        {
            msg = "Error with booking lesson!";
        }
        else
        {
            var authState = await AuthState;
            var user = authState.User;
            
            userClaims = user.Claims;
            foreach (var claim in userClaims!)
            {
                if (claim.Type.Equals("Username"))
                    username = claim.Value;
            }
            User player = await userService.GetByUsernameAsync(username);
            
            DateTime dateTime = Convert.ToDateTime(instructorLesson.DateTime);
            LessonCreationDto dto = new LessonCreationDto(dateTime, player, instructorLesson.InstructorName);
            await lessonService.CreateAsync(dto);
        }
        StateHasChanged();
    }
}