@page "/ViewAndManageEquipment/{Name}/{Amount:int}"
@using HttpClients.ClientInterfaces
@using global::Shared.Dtos.EquipmentDto
@using global::Shared.Model
@inject NavigationManager navMgr
@inject IJSRuntime jsRuntime;
@inject IEquipmentService EquipmentService;
<h3>ViewAndManageEquipment</h3>
<div class="filter-bar">
<div class="filters-container">
        <img src="icons/@(doShowFilters1 ? "clear_" : "")add.png" class="funnel" @onclick="@(() => doShowFilters1 = !doShowFilters1)" alt="Funnel"/>
<div class="form-group field">
        <label>Name:</label>
        <input type="text" @bind="dto.Name" readonly/>
    </div>
    <br/>
    <div class="form-group field">
        <label>Amount :</label>
        <input type="text" @bind="dto.Amount" />
    </div>  </div>  </div>  
 <div class="button-row">
                @if (!string.IsNullOrEmpty(error))
                {
                    <label style="color: red">@error</label>
                }
                
<button class="createEquipmentButton"  @onclick="UpdateEquipment">Update</button>
</div>
    
@code {
    private bool doShowFilters1 = false;
    private bool doShowFilters2 = false;
    private string msg = "";
    private string error = "";
    private bool doShowFilters = false;
    private string equipmentName;
    private int newAmount;
    private int oldAmount;
    private EquipmentBasicDto dto = null!;
    private IEnumerable<Equipment?> Equipments = new List<Equipment?>();
    private IEnumerable<EquipmentBasicDto> equipmentBasicDtos = new List<EquipmentBasicDto>();
    protected override async Task OnInitializedAsync()
    {
        msg = "";
        try
        {
            Equipments = await EquipmentService.getAllEquipmentAsync(equipmentName);
        
            equipmentBasicDtos = Equipments.GroupBy(e => e.Name).Select(e => new EquipmentBasicDto { Name = e.Key, Amount = e.Count() }).ToList();

           
            

            
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    } 
    private async Task UpdateEquipment()
    {
        try
        {
            error = "";
            if (newAmount > equipmentBasicDtos.Count())
            {
               await CreateEquipment();
            }
            if (newAmount < equipmentBasicDtos.Count())
            {
                await DeleteEquipment(equipmentName, newAmount);
            }
            
            
                
            
            
            error = "Equipment updated";
            Equipments = await EquipmentService.getAllEquipmentAsync(null);


        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            error = e.Message;
        }
    }
    
    private async Task CreateEquipment()
    {
        try
        {
            error = "";
            List<EquipmentBasicDto> equipmentList = new List<EquipmentBasicDto>();



            for (int i = 0; i < newAmount; i++)
            {
                EquipmentBasicDto basicDto = new(equipmentName);
                equipmentList.Add(basicDto);
                

            }
            await EquipmentService.CreateEquipmentAsync(equipmentList, newAmount);
            
                
            
            
         
           


        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            error = e.Message;
        }
    }
    
    private async Task DeleteEquipment(string name, int amount )
    {
       
           
            await EquipmentService.UpdateEquipmentAmount(name, amount);
              
            
            Equipments = await EquipmentService.getAllEquipmentAsync(null);
            

      
    }
    
}