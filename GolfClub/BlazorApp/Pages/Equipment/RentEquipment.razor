@page "/RentEquipment/{id:int}"
@using global::Shared.Model
@using HttpClients.ClientInterfaces
@using global::Shared.Dtos.EquipmentDto
@inject IEquipmentService EquipmentService
@inject IGameService GameService
@inject IJSRuntime jsRuntime
@inject NavigationManager navMgr

<div class="headline_box">
    <img src="img/golfball.png" class="golfball" alt="Golf Ball"/>
    <h3 class="headline">Manage Rented Equipment </h3>
    <img src="img/golfball.png" class="golfball" alt="Golf Ball"/>
</div>
@if (game != null)
{
    <div class="form-group field">
        <label>Game id:</label>
        <input type="text" @bind="Id"/>
    </div>
    <br/>
    <div class="form-group field">
        <label>Equipment rented for the current game:</label>
        @foreach (var equip in rentedEquipment)
        {
            <li>@equip!.Name</li> 
        }
    </div>
    <button class="removeEquipmentFromGameBtn" @onclick="ConfirmActionForReturn">Return Equipment</button>
    <br/>
    <br/>
    <div>
        <label > Choose equipments to add to the game:</label >

        <select class="setEquipmentToBeAddedBtn"   name="addEquipment" id="addEquipment" @onchange="SetEquipmentsToAddToGame">
            <option>Choose:</option>
            @foreach (var e in equipmetCounts)
            {
                <option value="@e.Name"> @e.Name </option>
            }
        </select >

        <button class="addEquipmentToGameBtn" @onclick="AddEquipment"> Add to game</button>
    </div>
    <br/>
    <br>
    <h5> Selected Equipment </h5>

    @if (equipmentAvaialbleId.Count > 0)
    {
        <table class="table">
            <thead >
            <tr>
                <th> Equipment Name </th>
                <th> Remove </th >
            </tr >
            </thead >
            <tbody >
            @foreach (var i in _equipments)
            {
                foreach (var j in equipmentAvaialbleId)
                {
                    if (i.Id == j)
                    {

                        <tr >
                            <td > @i.Id   </td >
                            <td > @i.Name </td >
                            <td >
                                <img src="img/delete.png" class="funnel" @onclick="RemoveEquipment"/>

                            </td >
                        </tr>
                    }
                }
            }
            
                </tbody >
        </table>
    }
    <br/>
    <br/>



    <button @onclick="ConfirmAction" class="rentEquipment"> RentEquipment </button>
    @if (!string.IsNullOrEmpty(error))
    {
        <label class="error"> @error </label>
    }
    else 
    {
        <label class="message"> @msg </label>
    }
}

@code {
    [Parameter]
        public int Id { get; set; }
    private IEnumerable<Equipment?> _equipments=new List<Equipment>();
    private IEnumerable<Equipment?> rentedEquipment = new List<Equipment?>();
    private IEnumerable<EquipmentBasicDto> equipmetCounts=new List<EquipmentBasicDto>();
    private List<int> equipmentAvaialbleId = new List<int>();
    private Equipment? equipmentToAdd;
    private string error = "";
    private string msg = "";
    private Game? game;
   
   
    ///Method which gets called when accessing the page 
    protected override async Task OnInitializedAsync()
    {
        try
        {
            game = await GameService.GetGameByIdAsync(Id)!;
            _equipments = (await EquipmentService.GetAvailableEquipment())!;
            equipmetCounts=_equipments.GroupBy(e => e.Name).Select(e => new EquipmentBasicDto { Name = e.Key, Amount = e.Count() }).ToList();
            rentedEquipment = (await EquipmentService.GetEquipmentByGameIdAsync(Id))!;


        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }

    ///Removes the selected item
    private async Task RemoveEquipment()
    {
        msg = "";
        try
        { 
            Console.WriteLine("equipmentToAdd is null: " + (equipmentToAdd?.Id));
            equipmentAvaialbleId.Remove(equipmentToAdd.Id);
            msg = "Item removed";
           
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            error = e.Message;
        }
    }
///Creates order with the list of ingredients
    private async Task CreateOrder()
    {
       
        msg = "";
        if (_equipments == null)
        {
            error = "You must select an equipment!";
            return;
        }
        msg = "";
        try
        {
            
            RentEquipmentDto dto = new RentEquipmentDto(Id,equipmentAvaialbleId);
           
            try
            {
                
                await EquipmentService.RentEquipment(dto);
                    
                    msg = "Renting process finished successfully!";
          
               
            }
            catch (Exception e)
            {
                Console.WriteLine(e);
                error = "The renting process was not successful!";
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            error = e.Message;
        }
     
    }
///Asks for confirmation before renting the equipment
    private async Task ConfirmAction()
    {
        bool confirmed = await jsRuntime.InvokeAsync<bool>("confirmAction","Please confirm the renting of the equipment");

        if (confirmed)
        {
            await CreateOrder();
            await OnInitializedAsync();
        }
        else
        {
            await OnInitializedAsync();
        }
    }
    
    private void SetEquipmentsToAddToGame(ChangeEventArgs e)
    {
        Console.WriteLine("SetEquipmentsToAddToGame method called");

        string selectedValue = e.Value?.ToString()!;
        Console.WriteLine("Selected Value: " + selectedValue);
         equipmentToAdd = _equipments.FirstOrDefault(equipment => equipment != null && equipment.Name == selectedValue);
        List<Equipment> toRemove = _equipments.ToList();
        toRemove.Remove(equipmentToAdd);
        

        if (equipmentToAdd != null)
        {
            Console.WriteLine("Equipment Found: " + equipmentToAdd.Name);
        }
        else
        {
            Console.WriteLine("Equipment Not Found!");
        }
    }
    private async Task AddEquipment()
    {
        msg = "";
        try
        {Console.WriteLine("equipmentAvaialbleId is null: " + (equipmentAvaialbleId == null));
            Console.WriteLine("equipmentToAdd is null: " + (equipmentToAdd?.Id));
            Console.WriteLine("equipmentAvaialbleId: " + string.Join(", ", equipmentAvaialbleId));


            if (equipmentToAdd != null && equipmentAvaialbleId != null && !equipmentAvaialbleId.Contains(equipmentToAdd.Id))
            {
                equipmentAvaialbleId.Add(equipmentToAdd.Id);
             
                 
                msg = "Equipment item added successfully!";
            }
            else
            {
                error = "Equipment item already added!";
            }
            
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            error = e.Message;
        }
    }

    private async Task ReturnEquipment()
    {
      
       
        msg = "";
        try
        {
            
             RentEquipmentDto dto = new RentEquipmentDto(Id,equipmentAvaialbleId);
           
            try
            {
                
                 await EquipmentService.DeleteAllEquipmentByGameIdAsync(dto);
                    
                msg = "Equipments returned successfully!";
          
               
            }
            catch (Exception e)
            {
                Console.WriteLine(e);
                error = "The process was not successful!";
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            error = e.Message;
        }
    }
    
    private async Task ConfirmActionForReturn()
    {
        bool confirmed = await jsRuntime.InvokeAsync<bool>("confirmAction","Please confirm the return of the equipment");

        if (confirmed)
        {
            await ReturnEquipment();
            await OnInitializedAsync();
        }
        else
        {
            await OnInitializedAsync();
        }
    }
}