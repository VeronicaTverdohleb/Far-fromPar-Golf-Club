@page "/RentEquipment/{id:int}"
@using global::Shared.Model
@using HttpClients.ClientInterfaces
@using global::Shared.Dtos.EquipmentDto
@using System.Diagnostics
@using global::Shared.Dtos.GameDto
@inject IEquipmentService EquipmentService
@inject IGameService GameService
@inject IUserService UserService
@inject IJSRuntime jsRuntime
@inject NavigationManager navMgr
<h3>RentEquipment</h3>

@if (game != null)
{
    <div class="form-group field">
        <label>Game id:</label>
        <input type="text" @bind="Id"/>
    </div>
   <div class="form-group field">
        <label>Equipment already added:</label>
         @foreach (var equip in rentedEquipment)
                                {
                                   <li>@equip!.Name</li> 
                                }
                     </div>
    <button class="addEquipmentToGameBtn" @onclick="ReturnEquipment">Return Equipment</button>
    <div>
        <label > Choose equipments to add to the game:</label >

        <select name="addEquipment" id="addEquipment" @onchange="SetEquipmentsToAddToGame">
            <option>Choose:</option>
            @foreach (var e in equipmetCounts)
            {
                <option value="@e.Name"> @e.Name </option>
            }
        </select >

        <button class="addEquipmentToGameBtn" @onclick="AddEquipment"> Add to game</button>
    </div>
    <br/>
    <br>
    <h5> Selected Equipment </h5>

    @if (equipmentAvaialbleId.Count > 0)
    {
        <table class="table">
            <thead >
            <tr>
                <th> Equipment Name </th>
                <th> Remove </th >
            </tr >
            </thead >
            <tbody >
            @foreach (var i in _equipments)
            {
                foreach (var j in equipmentAvaialbleId)
                {
                    if (i.Id == j)
                    {

                        <tr >
                            <td > @i.Id   </td >
                            <td > @i.Name </td >
                            <td >
                                <img src="img/delete.png" class="funnel" @onclick="RemoveEquipment"/>

                            </td >
                        </tr>
                    }
                }
            }
            
                </tbody >
        </table>
    }
    <br/>
    <br/>



    <button @onclick="ConfirmAction" class="rentEquipment"> RentEquipment </button>
    @if (!string.IsNullOrEmpty(msg))
    {
        <label class="message"> @msg </label>
    }
}

@code {
    [Parameter]
        public int Id { get; set; }
    private IEnumerable<Equipment?> _equipments=new List<Equipment>();
    private IEnumerable<Equipment?> rentedEquipment = new List<Equipment?>();
    private List<int>? equipmentAdded = new List<int>();
    private IEnumerable<EquipmentBasicDto> equipmetCounts=new List<EquipmentBasicDto>();
    private IEnumerable<User> memeberNames = new List<User>();
    private List<int> equipmentAvaialbleId = new List<int>();
    
    private Game gamesExisting;
    private Equipment? equipmentToAdd;
    private string mName;
    private int gameId;
    private string error = "";
    private string msg = "";
    private Game? game;
    private EquipmentBasicDto dto=null!;
    //How to call the method from game which only gives the members in active games
    ///Method which gets called when accessing the page 
    protected override async Task OnInitializedAsync()
    {
        try
        {
            game = await GameService.GetGameByIdAsync(Id)!;
            //equipmentAdded = await EquipmentService.GetGameEquipmentIds(Id);
            _equipments = (await EquipmentService.GetAvailableEquipment())!;
            //_equipments = await EquipmentService.getAllEquipmentAsync(null);
            equipmetCounts=_equipments.GroupBy(e => e.Name).Select(e => new EquipmentBasicDto { Name = e.Key, Amount = e.Count() }).ToList();
            rentedEquipment = (await EquipmentService.GetEquipmentByGameIdAsync(Id))!;
    // equipmentAdded = await EquipmentService.GetGameEquipmentIds(Id);
    //equipmentAvaialbleId = await EquipmentService.GetAvailableEquipmentIds();
    //equipmetCounts = await EquipmentService.GetAvailableEquipment();
    // List<int> usedEquipmentIds = await GetUsedEquipmentIds();

    /* equipmetCounts = equipments
                .Where(e =>
                {
                    Debug.Assert(equipmentAvaialbleId != null, nameof(equipmentAvaialbleId) + " != null");
                    return !equipmentAvaialbleId.Contains(e.Id);
                })
                .GroupBy(e => e.Name)
                .Select(e => new EquipmentBasicDto { Name = e.Key, Amount = e.Count() })
                .ToList();*/
    // equipmetCounts = equipments.GroupBy(e => e.Name).Select(e => new EquipmentBasicDto { Name = e.Key, Amount = e.Count() }).ToList();
    //memeberNames = await UserService.GetAllUsersAsync();

    // await LoadAvailableEquipments();
    // gamesExisting = await GameService.GetActiveGameByUsernameAsync(mName)!;

        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }
   /* private async Task LoadAvailableEquipments()
    {
        var usedEquipmentIds = await GetAvailableEquipmentIds();
        equipmentAdded=_equipments.Where(e => !usedEquipmentIds.Contains(e.Id)).ToList();

         }*/
    
   
///Removes the selected item
    private async Task RemoveEquipment()
    {
        msg = "";
        try
        { Console.WriteLine("equipmentToAdd is null: " + (equipmentToAdd?.Id));

            equipmentAvaialbleId.Remove(equipmentToAdd.Id);
           // await OnInitializedAsync();
            
            msg = "Item removed";
           
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }
///Creates order with the list of ingredients
    private async Task CreateOrder()
    {
       
        msg = "";
        if (_equipments == null)
        {
            msg = "You must select an equipment!";
            return;
        }
        msg = "";
        try
        {
            
            RentEquipmentDto dto = new RentEquipmentDto(Id,equipmentAvaialbleId);
           
            try
            {
                
                await EquipmentService.RentEquipment(dto);
                    
                    msg = "The renting process is successful";
          
               
            }
            catch (Exception e)
            {
                Console.WriteLine(e);
                msg = "The renting process is not successful";
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
     
    }
///Asks for confirmation before creating order
    private async Task ConfirmAction()
    {
        bool confirmed = await jsRuntime.InvokeAsync<bool>("confirmAction");

        if (confirmed)
        {
            await CreateOrder();
            await OnInitializedAsync();
        }
        else
        {
            await OnInitializedAsync();
        }
    }
   
    private async Task<List<int>?> GetAvailableEquipmentIds()
    {
        IEnumerable<Equipment>? availableEquipment = await EquipmentService.GetAvailableEquipment();
        if (availableEquipment != null)
            foreach (var a in availableEquipment)
            {
                equipmentAvaialbleId.Add(a.Id);
            }
        return equipmentAvaialbleId;
        
       // return usedEquipment.Select(e => e.Id).ToList();
    }
    /*foreach (var used in usedEquipment)
        {
            equipmentAvaialbleId.Add(used.Id);
        }
        return equipmentAvaialbleId;*/
    
    
    private IEnumerable<User> GetFilteredMemberNames()
    {
        var filteredNames = memeberNames.Where(u => u.Role == "Member");
        var filteredNamesWithActiveGame = new List<User>();

        foreach (var user in filteredNames)
        {
            if (IsActiveGameByUsername(user.Name).Result)
            {
                filteredNamesWithActiveGame.Add(user);
            }
        }

        return filteredNamesWithActiveGame;
    }
    
    public async Task<bool> IsActiveGameByUsername(string username)
    {
        var activeGame = await GameService.GetActiveGameByUsernameAsync(username);
        return activeGame!=null; // Return true if an active game exists, false otherwise
    }
    private void SetEquipmentsToAddToGame(ChangeEventArgs e)
    {
        Console.WriteLine("SetEquipmentsToAddToGame method called");

        string selectedValue = e.Value?.ToString()!;
        Console.WriteLine("Selected Value: " + selectedValue);
         equipmentToAdd = _equipments.FirstOrDefault(equipment => equipment != null && equipment.Name == selectedValue);
        List<Equipment> toRemove = _equipments.ToList();
        toRemove.Remove(equipmentToAdd);
        

        if (equipmentToAdd != null)
        {
            Console.WriteLine("Equipment Found: " + equipmentToAdd.Name);
        }
        else
        {
            Console.WriteLine("Equipment Not Found!");
        }
    }
    private async Task AddEquipment()
    {
        msg = "";
        try
        {Console.WriteLine("equipmentAvaialbleId is null: " + (equipmentAvaialbleId == null));
            Console.WriteLine("equipmentToAdd is null: " + (equipmentToAdd?.Id));
            Console.WriteLine("equipmentAvaialbleId: " + string.Join(", ", equipmentAvaialbleId));


            if (equipmentToAdd != null && equipmentAvaialbleId != null && !equipmentAvaialbleId.Contains(equipmentToAdd.Id))
            {
                equipmentAvaialbleId.Add(equipmentToAdd.Id);
             
                 
                msg = "Item added";
            }
            else
            {
                msg = "Item already added";
            }
            
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }

    private async Task ReturnEquipment()
    {
        await EquipmentService.DeleteAllEquipmentByGameIdAsync(Id);

    }
}