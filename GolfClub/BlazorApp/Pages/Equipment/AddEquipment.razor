@page "/AddEquipment"
@using HttpClients.ClientInterfaces
@using global::Shared.Model
@using global::Shared.Dtos.EquipmentDto
@inject NavigationManager navMgr
@inject IJSRuntime jsRuntime;
@inject IEquipmentService EquipmentService;
<h3>Add Equipment</h3>
<div class="filter-bar">
<div class="filters-container">
        <img src="icons/@(doShowFilters1 ? "clear_" : "")add.png" class="funnel" @onclick="@(() => doShowFilters1 = !doShowFilters1)" alt="Funnel"/>
<div class="form-group field">
        <label>Name:</label>
        <input type="text" @bind="newEquipmentName"/>
    </div>
    <br/>
    <div class="form-group field">
        <label>Amount :</label>
        <input type="text" @bind="amount" />
    </div>  </div>  </div>  
 <div class="button-row">
                @if (!string.IsNullOrEmpty(error))
                {
                    <label style="color: red">@error</label>
                }
                
<button class="createEquipmentButton"  @onclick="CreateEquipment">Create</button>
</div>
    
    

@code {
    private bool doShowFilters1 = false;
    private bool doShowFilters2 = false;
    private string msg = "";
    private string error = "";
    private bool doShowFilters = false;
    private string newEquipmentName;
    private int amount;
    private IEnumerable<Equipment> Equipments = new List<Equipment>();
    private IEnumerable<EquipmentBasicDto> equipmentBasicDtos = new List<EquipmentBasicDto>();

    private async Task CreateEquipment()
    {
        try
        {
            error = "";
            List<EquipmentBasicDto> equipmentList = new List<EquipmentBasicDto>();



            for (int i = 0; i < amount; i++)
            {
                EquipmentBasicDto basicDto = new(newEquipmentName);
                equipmentList.Add(basicDto);
                

            }
            await EquipmentService.CreateEquipmentAsync(equipmentList, amount);
            
                
            
            
            error = "Equipment created";
            Equipments = await EquipmentService.getAllEquipmentAsync(null);


        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            error = e.Message;
        }
        }


}