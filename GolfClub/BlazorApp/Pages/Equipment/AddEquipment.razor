@page "/AddEquipment"
@using HttpClients.ClientInterfaces
@using global::Shared.Model
@using global::Shared.Dtos.EquipmentDto
@inject NavigationManager navMgr
@inject IJSRuntime jsRuntime;
@inject IEquipmentService EquipmentService;
<div class="headline_box">
    <img src="img/golfball.png" class="golfball" alt="Golf Ball"/>
    <h3 class="headline">Add Equipment </h3>
    <img src="img/golfball.png" class="golfball" alt="Golf Ball"/>
</div>
<div class="filter-bar">
    <div class="filters-container">
        <div class="form-group field">
            <label>Name:</label>
            <input type="text" @bind="newEquipmentName"/>
        </div>
        <br/>
        <div class="form-group field">
            <label>Amount :</label>
            <input type="text" @bind="amount"/>
        </div>
    </div>
</div>
<div class="button-row">
    @if (!string.IsNullOrEmpty(error))
    {
        <label class="error" style="color: red">@error</label>
    }
    else
    {
        <label class="message" style="color: green">@msg</label>
    }

    <br/>

    <button class="createEquipmentButton" @onclick="CreateEquipment">Create</button>
</div>


@code {
    private bool doShowFilters1 = false;
    private bool doShowFilters2 = false;
    private string msg = "";
    private string error = "";
    private bool doShowFilters = false;
    private string newEquipmentName;
    private int amount;
    private IEnumerable<Equipment?> Equipments = new List<Equipment?>();
    private IEnumerable<EquipmentBasicDto> equipmentBasicDtos = new List<EquipmentBasicDto>();

    ///Creates new equipment when employee fills in the name and amount fields and clicks on the button
    private async Task CreateEquipment()
    {
        try
        {
            msg = "";
            List<EquipmentBasicDto> equipmentList = new List<EquipmentBasicDto>();


            for (int i = 0; i < amount; i++)
            {
                EquipmentBasicDto basicDto = new(newEquipmentName);
                equipmentList.Add(basicDto);
            }
            await EquipmentService.CreateEquipmentAsync(equipmentList, amount);


            msg = "Equipment created";
            Equipments = await EquipmentService.GetAllEquipmentAsync(null);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            error = e.Message;
        }
    }


}