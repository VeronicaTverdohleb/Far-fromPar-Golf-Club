@page "/RentEquipmentsForGame"
@using global::Shared.Model
@using HttpClients.ClientInterfaces
@inject IGameService GameService
@inject IEquipmentService EquipmentService
@inject NavigationManager NavMgr;


<div class="headline_box">
    <img src="img/golfball.png" class="golfball" alt="Golf Ball"/>
    <h3 class="headline"> Rent Equipment </h3>
    <img src="img/golfball.png" class="golfball" alt="Golf Ball"/>
</div>
<label>
    <h5>Type members username:</h5>
</label>
<input type="text" class="type_username" placeholder="Username" @bind="@selectedUsername"/>
<button class="searchbtn" @onclick="@GetPlayerEquipment">Search </button>

<h7 class="error">@error</h7>
<hr>
@if (playerGames.Any())
{
    <h5 class="gamecard_note">Click on the card to manage the player's rented equipment</h5>
}
@foreach (Game game in playerGames)
{
    <div class="game_card">

        <a class="game_card_anchor" @onclick=@(() => GoRent(@game.Id))>
            <label class="game_card_label">Game ID:</label>@game.Id
            <hr>
            <label class="game_card_label">Co-players:</label>
            @if (game.Players.Count == 1)
            {
                <p>No Co-players in this Game.</p>
            }
            else
            {
                @foreach (User co_player in game.Players)
                {
                    if (!co_player.UserName.Equals(selectedUsername))
                    {
                        <label class="co_player">@co_player.UserName</label>
                    }
                }
            }
            <hr>
            <label class="game_card_label">Equipments:</label>
            @if (game.Equipments == null || !game.Equipments.Any())
            {
                <p>No Equipments in this Game.</p>
            }
            else
            {
                <p>@selectedUsername's Equipments:</p>
                <table class="score_table">
                    <tr>
                        <th>Rented equipments exist for this game</th>
                        @foreach (var e in rentedEquipment)
                        {
                            {
                                <li>@e!.Name</li>
                            }
                        }
                    </tr>
                </table>
            }

        </a>
    </div>
}

@code {
    private IEnumerable<Equipment?> rentedEquipment = new List<Equipment?>();
    private string error = "";
    private string selectedUsername = "";
    private ICollection<Game> playerGames = new List<Game>();

    /// When an employee inserts a playerUsername, the player's info gets fetched via the GameService and EquipmentService methods
    private async Task GetPlayerEquipment()
    {
        playerGames = new List<Game>();
        error = "";
        if (selectedUsername.Equals(""))
        {
            error = "Insert username";
            return;
        }

        try
        {
            playerGames = await GameService.GetAllGamesByUsernameAsync(selectedUsername);
            foreach (Game g in playerGames)
            {
                rentedEquipment = (await EquipmentService.GetEquipmentByGameIdAsync(g.Id))!;
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
            error = e.Message;
        }
        if (!error.Equals("No user found") && !playerGames.Any())
            error = "This player has no scores";
    }

    ///When  an employee clicks on a game card it gets redirected to the "RentEquipment" web page
    private void GoRent(int id)
    {
        NavMgr.NavigateTo($"/RentEquipment/{id}");
    }


}